Q1) 

Activity.xml 

<?xml version="1.0" encoding="utf-8"?> 

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" 

android:layout_width="match_parent" 

android:layout_height="match_parent" 

android:orientation="vertical" 

android:padding="20dp" 

android:gravity="center"> 

 

<EditText 

android:id="@+id/subject" 

android:layout_width="match_parent" 

android:layout_height="wrap_content" 

android:hint="Subject" 

android:inputType="text"/> 

 

<EditText 

android:id="@+id/body" 

android:layout_width="match_parent" 

android:layout_height="wrap_content" 

android:hint="Body" 

android:inputType="textMultiLine" 

android:layout_marginTop="10dp"/> 

 

<Button 

android:id="@+id/attachFileButton" 

android:layout_width="wrap_content" 



android:layout_height="wrap_content" 

android:text="Attach File" 

android:layout_marginTop="20dp"/> 

 

<Button 

android:id="@+id/sendEmailButton" 

android:layout_width="wrap_content" 

android:layout_height="wrap_content" 

android:text="Send Email" 

android:layout_marginTop="20dp"/> 

</LinearLayout> 

 

Activity.java 

package com.example.sendemailwithattachment; 

 

import android.content.Intent; 

import android.net.Uri; 

import android.os.Bundle; 

import android.provider.OpenableColumns; 

import android.widget.Button; 

import android.widget.EditText; 

import android.widget.Toast; 

 

import androidx.appcompat.app.AppCompatActivity; 

 

import java.io.File; 

import java.util.ArrayList; 

 



public class MainActivity extends AppCompatActivity { 

 

private static final int PICK_FILE_REQUEST = 1; 

 

private EditText subjectEditText, bodyEditText; 

private Button attachFileButton, sendEmailButton; 

private Uri fileUri;  // Uri to store the attachment file 

 

@Override 

protected void onCreate(Bundle savedInstanceState) { 

super.onCreate(savedInstanceState); 

setContentView(R.layout.activity_main); 

 

subjectEditText = findViewById(R.id.subject); 

bodyEditText = findViewById(R.id.body); 

attachFileButton = findViewById(R.id.attachFileButton); 

sendEmailButton = findViewById(R.id.sendEmailButton); 

 

// Handle Attach File button click 

attachFileButton.setOnClickListener(v -> openFilePicker()); 

 

// Handle Send Email button click 

sendEmailButton.setOnClickListener(v -> sendEmail()); 

} 

 

// Open the file picker to choose a file for attachment 

private void openFilePicker() { 

Intent intent = new Intent(Intent.ACTION_OPEN_DOCUMENT); 



intent.setType("*/*");  // Allow any file type 

intent.addCategory(Intent.CATEGORY_OPENABLE); 

startActivityForResult(intent, PICK_FILE_REQUEST); 

} 

 

// Handle the file selection result 

@Override 

protected void onActivityResult(int requestCode, int resultCode, Intent data) { 

super.onActivityResult(requestCode, resultCode, data); 

if (requestCode == PICK_FILE_REQUEST && resultCode == RESULT_OK && data != null) { 

fileUri = data.getData(); 

// Get the file name from the URI (optional) 

String fileName = getFileName(fileUri); 

Toast.makeText(this, "File Selected: " + fileName, Toast.LENGTH_SHORT).show(); 

} 

} 

 

// Get the file name from the URI 

private String getFileName(Uri uri) { 

String fileName = null; 

try (Cursor cursor = getContentResolver().query(uri, null, null, null, null)) { 

if (cursor != null && cursor.moveToFirst()) { 

int nameIndex = cursor.getColumnIndex(OpenableColumns.DISPLAY_NAME); 

fileName = cursor.getString(nameIndex); 

} 

} 

return fileName; 

} 



 

// Send email with the subject, body, and attachment 

private void sendEmail() { 

String subject = subjectEditText.getText().toString(); 

String body = bodyEditText.getText().toString(); 

 

if (subject.isEmpty() || body.isEmpty() || fileUri == null) { 

Toast.makeText(this, "Please fill in all fields and attach a file", Toast.LENGTH_SHORT).show(); 

return; 

} 

 

// Create an intent to send the email with attachment 

Intent emailIntent = new Intent(Intent.ACTION_SEND); 

emailIntent.setType("*/*"); 

emailIntent.putExtra(Intent.EXTRA_EMAIL, new String[]{"recipient@example.com"});  // 
Email recipient 

emailIntent.putExtra(Intent.EXTRA_SUBJECT, subject); 

emailIntent.putExtra(Intent.EXTRA_TEXT, body); 

emailIntent.putExtra(Intent.EXTRA_STREAM, fileUri);  // Attach the file 

 

// Verify that there is an email client installed 

if (emailIntent.resolveActivity(getPackageManager()) != null) { 

startActivity(Intent.createChooser(emailIntent, "Send Email")); 

} else { 

Toast.makeText(this, "No email client installed", Toast.LENGTH_SHORT).show(); 

} 

} 

} 



Manifest File- 

<manifest xmlns:android="http://schemas.android.com/apk/res/android" 

package="com.example.sendemailwithattachment"> 

 

<application 

android:allowBackup="true" 

android:icon="@mipmap/ic_launcher" 

android:label="Email with Attachment" 

android:theme="@style/Theme.AppCompat.Light.DarkActionBar"> 

 

<activity android:name=".MainActivity"> 

<intent-filter> 

<action android:name="android.intent.action.MAIN" /> 

<category android:name="android.intent.category.LAUNCHER" /> 

</intent-filter> 

</activity> 

 

</application> 

</manifest> 

 

<uses-permission android:name="android.permission.READ_EXTERNAL_STORAGE"/> 

<uses-permission android:name="android.permission.WRITE_EXTERNAL_STORAGE"/> 

 

 

 

 

 

 



Q2) 

Activity.xml 

<?xml version="1.0" encoding="utf-8"?> 

<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android" 

android:layout_width="match_parent" 

android:layout_height="match_parent" 

android:orientation="vertical" 

android:gravity="center" 

android:padding="20dp"> 

 

<Button 

android:id="@+id/btnPickTime" 

android:layout_width="wrap_content" 

android:layout_height="wrap_content" 

android:text="Pick Time" /> 

 

<TextView 

android:id="@+id/txtTime" 

android:layout_width="wrap_content" 

android:layout_height="wrap_content" 

android:text="Selected Time Will Appear Here" 

android:textSize="18sp" 

android:layout_marginTop="20dp" /> 

</LinearLayout> 

 

 

 

 



Activity.java 

package com.example.timepickerdemo; 

 

import android.app.TimePickerDialog; 

import android.os.Bundle; 

import android.widget.Button; 

import android.widget.TextView; 

import android.widget.TimePicker; 

 

import androidx.appcompat.app.AppCompatActivity; 

 

import java.util.Calendar; 

 

public class MainActivity extends AppCompatActivity { 

 

Button btnPickTime; 

TextView txtTime; 

 

@Override 

protected void onCreate(Bundle savedInstanceState) { 

super.onCreate(savedInstanceState); 

setContentView(R.layout.activity_main); 

 

btnPickTime = findViewById(R.id.btnPickTime); 

txtTime = findViewById(R.id.txtTime); 

 

btnPickTime.setOnClickListener(v -> { 

// Get current time 



Calendar calendar = Calendar.getInstance(); 

int hour = calendar.get(Calendar.HOUR_OF_DAY); 

int minute = calendar.get(Calendar.MINUTE); 

 

// Create TimePickerDialog 

TimePickerDialog timePickerDialog = new TimePickerDialog( 

MainActivity.this, 

(TimePicker view, int hourOfDay, int minute1) -> { 

String selectedTime = String.format("%02d:%02d", hourOfDay, minute1); 

txtTime.setText("Selected Time: " + selectedTime); 

}, 

hour, 

minute, 

true // 24 hour format 

); 

 

timePickerDialog.show(); 

}); 

} 

} 

 

 

Manifest File- 

<manifest xmlns:android="http://schemas.android.com/apk/res/android" 

package="com.example.timepickerdemo"> 

 

<application 

android:allowBackup="true" 



android:label="TimePickerDemo" 

android:supportsRtl="true" 

android:theme="@style/Theme.AppCompat.Light.NoActionBar"> 

 

<activity android:name=".MainActivity"> 

<intent-filter> 

<action android:name="android.intent.action.MAIN" /> 

<category android:name="android.intent.category.LAUNCHER" /> 

</intent-filter> 

</activity> 

 

</application> 

 

</manifest>